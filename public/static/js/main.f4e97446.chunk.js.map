{"version":3,"sources":["images/Chatnonymous_Icon.png","images/Chatnonymous_Text.png","styles/theme.js","components/Header.js","screens/Home.js","screens/CreateRoom.js","components/Message.js","screens/Room.js","App.js","serviceWorker.js","index.js","images/Chatnonymous_Dark.png"],"names":["module","exports","createMuiTheme","typography","useNextVariants","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","useStyles","makeStyles","theme","topicTitle","flexGrow","textAlign","userTitle","buttonContainer","display","justifyContent","width","marginLeft","breakpoints","down","Header","props","classes","users","undefined","buttons","headerPos","className","Tooltip","title","aria-label","IconButton","edge","color","onClick","onOpenModal","onLeave","AppBar","position","Toolbar","src","chatIcon","height","alt","chatText","Home","useState","code","setCode","Grid","container","justify","item","xs","sm","lg","Card","style","marginTop","CardHeader","CardContent","chatDark","maxWidth","marginBottom","TextField","onChange","e","target","value","placeholder","autoFocus","Button","variant","queyParam","encodeURIComponent","roomQuery","history","push","handleRoomJoin","CreateRoom","roomCode","setRoomCode","roomTopic","setRoomTopic","useEffect","generateRoomCode","cryptoRandomString","length","type","fullWidth","socket","emit","topic","handleGenerateRoom","message","margin","padding","fontSize","borderRadius","fontWeight","Message","msg","alignment","isSent","admin","backgroundColor","colour","time","modal","alignItems","border","boxShadow","shadows","spacing","modalButtons","flexDirection","inputContainer","bottom","scenarioContainer","maxHeight","overflow","noRoom","Room","isTyping","useRef","messagesEnd","useReducer","state","newState","hasJoined","messages","userMessage","userId","typingMessage","errorMessage","modalOpen","setState","handleRoomCode","useCallback","query","URLSearchParams","location","search","entries","param","idForUser","roomJoinedHandler","response","room","toString","newMessages","failedJoinHandler","roomLeftHandler","userUpdateHandler","userCount","newMessageHandler","someoneTypingHandler","typing","count","typeMessage","current","socketCommands","on","scrollIntoView","behavior","Fragment","console","log","map","index","key","float","clear","ref","Typography","err","onKeyPress","Modal","open","onClose","window","href","link","subject","encodeURI","body","mail","inviteEmail","copy","copyLink","io","App","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f4e97446.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Chatnonymous_Icon.6e10b6c1.png\";","module.exports = __webpack_public_path__ + \"static/media/Chatnonymous_Text.cc20713e.png\";","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nexport default createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  palette: {\r\n    common: { black: \"#000\", white: \"#fff\" },\r\n    background: { paper: \"#fff\", default: \"rgba(255, 255, 255, 1)\" },\r\n    primary: {\r\n      light: \"rgba(94, 94, 94, 1)\",\r\n      main: \"rgba(68, 68, 68, 1)\",\r\n      dark: \"rgba(0, 0, 0, 1)\",\r\n      contrastText: \"#fff\",\r\n    },\r\n    secondary: {\r\n      light: \"rgba(173, 173, 173, 1)\",\r\n      main: \"rgba(128, 126, 126, 1)\",\r\n      dark: \"rgba(92, 92, 92, 1)\",\r\n      contrastText: \"#fff\",\r\n    },\r\n    error: {\r\n      light: \"rgba(233, 121, 121, 1)\",\r\n      main: \"rgba(196, 42, 29, 1)\",\r\n      dark: \"rgba(168, 0, 0, 1)\",\r\n      contrastText: \"#fff\",\r\n    },\r\n    text: {\r\n      primary: \"rgba(0, 0, 0, 0.87)\",\r\n      secondary: \"rgba(0, 0, 0, 0.54)\",\r\n      disabled: \"rgba(0, 0, 0, 0.38)\",\r\n      hint: \"rgba(0, 0, 0, 0.38)\",\r\n    },\r\n  },\r\n});\r\n","import React, { Fragment } from \"react\";\r\nimport { ThemeProvider as MultiThemeProvider } from \"@material-ui/core/styles\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Toolbar, IconButton, Tooltip } from \"@material-ui/core\";\r\nimport theme from \"../styles/theme\";\r\n\r\nimport chatIcon from \"../images/Chatnonymous_Icon.png\";\r\nimport chatText from \"../images/Chatnonymous_Text.png\";\r\n\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  topicTitle: {\r\n    flexGrow: 3,\r\n    textAlign: \"center\",\r\n  },\r\n  userTitle: {\r\n    flexGrow: 1,\r\n    textAlign: \"end\",\r\n  },\r\n  buttonContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100px\",\r\n  },\r\n  text: {\r\n    marginLeft: \"10px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n\r\n  let users = undefined;\r\n  let buttons = undefined;\r\n  let headerPos = \"static\";\r\n\r\n  if (props.users && props.users !== \"\") {\r\n    users = <h4 className={classes.userTitle}>Users: {props.users}</h4>;\r\n    buttons = (\r\n      <Fragment>\r\n        <Tooltip title='Invite User' aria-label='invite-user'>\r\n          <IconButton\r\n            edge='end'\r\n            color='inherit'\r\n            onClick={() => props.onOpenModal()}\r\n          >\r\n            <PersonAddIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        <Tooltip title='Leave Room' aria-label='leave-room'>\r\n          <IconButton\r\n            edge='end'\r\n            color='inherit'\r\n            onClick={() => props.onLeave()}\r\n          >\r\n            <ExitToAppIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Fragment>\r\n    );\r\n    headerPos = \"fixed\";\r\n  }\r\n\r\n  return (\r\n    <MultiThemeProvider theme={theme}>\r\n      <AppBar position={headerPos}>\r\n        <Toolbar>\r\n          <img src={chatIcon} height='30px' alt='Chatnonymous Icon' />\r\n          <img\r\n            src={chatText}\r\n            height='30px'\r\n            alt='Chatnonymous Text'\r\n            className={classes.text}\r\n          />\r\n          {users}\r\n          {buttons}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </MultiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { ThemeProvider as MultiThemeProvider } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport theme from \"../styles/theme\";\r\n\r\nimport Header from \"../components/Header\";\r\n\r\nimport chatDark from \"../images/Chatnonymous_Dark.png\";\r\n\r\nconst Home = (props) => {\r\n  const [code, setCode] = useState(\"\");\r\n\r\n  const onRoomCodeChange = (e) => {\r\n    setCode(e.target.value);\r\n  };\r\n\r\n  const goToCreateRoom = () => {\r\n    props.history.push(\"/create-room\");\r\n  };\r\n\r\n  const handleRoomJoin = () => {\r\n    const queyParam = encodeURIComponent(\"code\");\r\n    const roomQuery = encodeURIComponent(`${code}`);\r\n    props.history.push(`/room?${queyParam}=${roomQuery}`);\r\n  };\r\n\r\n  return (\r\n    <MultiThemeProvider theme={theme}>\r\n      <Header />\r\n      <Grid container justify='center'>\r\n        <Grid item xs={10} sm={8} lg={6}>\r\n          <Card style={{ marginTop: 20 }}>\r\n            <CardHeader\r\n              title='Room Control'\r\n              color='inherit'\r\n              style={{ textAlign: \"center\" }}\r\n            />\r\n\r\n            <CardContent style={{ textAlign: \"center\" }}>\r\n              <img\r\n                src={chatDark}\r\n                style={{ maxWidth: \"200px\", marginBottom: 20 }}\r\n                alt='Chatnonymous Logo'\r\n              />\r\n              <Grid container justify='center'>\r\n                <Grid item xs={6} sm={4}>\r\n                  <TextField\r\n                    onChange={onRoomCodeChange}\r\n                    value={code}\r\n                    placeholder='Enter Room Code'\r\n                    autoFocus={true}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6} sm={4}>\r\n                  <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={() => handleRoomJoin()}\r\n                    disabled={code === \"\"}\r\n                  >\r\n                    Join Room\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container justify='center' style={{ marginTop: 20 }}>\r\n                <Grid item xs={8} sm={6}>\r\n                  <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={() => goToCreateRoom()}\r\n                  >\r\n                    Create New Room\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n          <Grid container justify='center' style={{ marginTop: 20 }}>\r\n            <Grid item xs={10} sm={8} style={{ textAlign: \"center\" }}>\r\n              <h1> Welcome!</h1>\r\n              <p>\r\n                Many people fear to voice themselves because they are judged by\r\n                who they are and what they say. This is found in many scenarios,\r\n                whether it be with an employer, a student, friends or even\r\n                family members.\r\n              </p>\r\n              <p>\r\n                Chatnonymous is an environment where people can share their\r\n                thoughts together without the concern of your identity attached\r\n                to these thoughts. This allows discussions to happen at the\r\n                clearest level so everyone in that environment can comprehend\r\n                and understand.\r\n              </p>\r\n              <p>\r\n                All conversations are contained within the room that you join or\r\n                create. No one outside of these rooms will ever have access to\r\n                or be able to see them.\r\n              </p>\r\n              <p>\r\n                None of your information or data is saved. There is no\r\n                identification while in a room conversation, only colours to\r\n                identify users when in a room.\r\n              </p>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </MultiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport cryptoRandomString from \"crypto-random-string\";\r\nimport { ThemeProvider as MultiThemeProvider } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport theme from \"../styles/theme\";\r\n\r\nimport Header from \"../components/Header\";\r\n\r\nimport chatDark from \"../images/Chatnonymous_Dark.png\";\r\n\r\nconst CreateRoom = (props) => {\r\n  const [roomCode, setRoomCode] = useState(\"\");\r\n  const [roomTopic, setRoomTopic] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // connect to server\r\n    generateRoomCode();\r\n  }, []);\r\n\r\n  const onRoomTopicChange = (e) => {\r\n    setRoomTopic(e.target.value);\r\n  };\r\n\r\n  const generateRoomCode = () => {\r\n    setRoomCode(cryptoRandomString({ length: 10, type: \"url-safe\" }));\r\n  };\r\n\r\n  const goToHome = () => {\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  const handleGenerateRoom = () => {\r\n    const queyParam = encodeURIComponent(\"code\");\r\n    const roomQuery = encodeURIComponent(`${roomCode}`);\r\n    props.socket.emit(\"createRoom\", {\r\n      code: roomCode,\r\n      topic: roomTopic,\r\n    });\r\n    props.history.push(`/room?${queyParam}=${roomQuery}`);\r\n  };\r\n\r\n  return (\r\n    <MultiThemeProvider theme={theme}>\r\n      <Fragment>\r\n        <Header />\r\n        <Grid container justify='center'>\r\n          <Grid item xs={10} sm={8} lg={6}>\r\n            <Card style={{ marginTop: 20 }}>\r\n              <CardHeader\r\n                title='Create a Room'\r\n                color='inherit'\r\n                style={{ textAlign: \"center\" }}\r\n              />\r\n              <CardContent style={{ textAlign: \"center\" }}>\r\n                <img\r\n                  src={chatDark}\r\n                  style={{ maxWidth: \"200px\", marginBottom: 20 }}\r\n                  alt='Chatnonymous Logo'\r\n                />\r\n                <Grid container justify='center'>\r\n                  <Grid item xs={6} sm={4}>\r\n                    <h2>Your room code is</h2>\r\n                    <h3>{roomCode}</h3>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify='center'>\r\n                  <Grid item xs={6} sm={4}>\r\n                    <TextField\r\n                      onChange={onRoomTopicChange}\r\n                      value={roomTopic}\r\n                      placeholder='Enter your Room Topic'\r\n                      fullWidth={true}\r\n                      autoFocus={true}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify='center' style={{ marginTop: 20 }}>\r\n                  <Grid item xs={8} sm={6}>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='primary'\r\n                      onClick={() => handleGenerateRoom()}\r\n                      disabled={roomTopic === \"\"}\r\n                    >\r\n                      Generate Room\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify='center' style={{ marginTop: 20 }}>\r\n                  <Grid item xs={8} sm={6}>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='primary'\r\n                      onClick={() => goToHome()}\r\n                    >\r\n                      Back to Home\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n            <Grid container justify='center' style={{ marginTop: 20 }}>\r\n              <Grid item xs={10} sm={8} style={{ textAlign: \"center\" }}>\r\n                <p>\r\n                  Create a room to begin your conversations! Label your topic of\r\n                  discussion and enter the room. Invite more users with the\r\n                  invite button (top right corner) when you enter the room.\r\n                </p>\r\n                <p>\r\n                  Each user will be assigned a unique colour. When all users\r\n                  leave, the room will be terminated. No information is recorded\r\n                  or saved.\r\n                </p>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Fragment>\r\n    </MultiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  message: {\r\n    color: \"white\",\r\n    width: \"80%\",\r\n    margin: \"2px\",\r\n    padding: \"1em\",\r\n    fontSize: \"smaller\",\r\n    borderRadius: \"10px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst Message = (props) => {\r\n  const classes = useStyles();\r\n\r\n  let msg = props.msg;\r\n\r\n  // check if it has been sent or recieve, add appropriate value to style\r\n  let alignment = props.isSent ? \"flex-end\" : \"flex-start\";\r\n\r\n  let admin = \"\";\r\n\r\n  if (props.msg.admin) admin = \"Admin Message\";\r\n\r\n  return (\r\n    <Grid container justify={alignment}>\r\n      <Grid item xs={8}>\r\n        <div\r\n          className={classes.message}\r\n          style={{\r\n            backgroundColor: msg.colour,\r\n          }}\r\n        >\r\n          {admin} @{msg.time}\r\n          <br />\r\n          <br />\r\n          {msg.text}\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default Message;\r\n","import React, { useRef, useReducer, useEffect, useCallback } from \"react\";\r\nimport {\r\n  ThemeProvider as MultiThemeProvider,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport cryptoRandomString from \"crypto-random-string\";\r\nimport { Typography, TextField, Modal, Button } from \"@material-ui/core\";\r\nimport theme from \"../styles/theme\";\r\n\r\nimport copy from \"copy-to-clipboard\";\r\n\r\nimport Header from \"../components/Header\";\r\nimport Message from \"../components/Message\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    width: 200,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    textAlign: \"center\",\r\n  },\r\n  modalButtons: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: 80,\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  inputContainer: {\r\n    position: \"fixed\",\r\n    marginTop: 30,\r\n    bottom: 0,\r\n    marginBottom: 20,\r\n    width: \"100%\",\r\n    marginLeft: 20,\r\n    backgroundColor: \"white\",\r\n  },\r\n  chatText: {\r\n    width: \"90%\",\r\n    position: \"relative\",\r\n  },\r\n  scenarioContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    marginTop: \"75px\",\r\n    maxHeight: \"80%\",\r\n    marginBottom: \"75px\",\r\n    overflow: \"auto\",\r\n  },\r\n  noRoom: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst Room = (props) => {\r\n  const initialState = {\r\n    hasJoined: false,\r\n    roomCode: \"\",\r\n    roomTopic: \"\",\r\n    users: \"\",\r\n    messages: [],\r\n    userMessage: \"\",\r\n    userId: \"\",\r\n    typingMessage: \"\",\r\n    errorMessage: \"\",\r\n    modalOpen: false,\r\n  };\r\n\r\n  const isTyping = useRef(false);\r\n  const messagesEnd = useRef(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  const reducer = (state, newState) => ({ ...state, ...newState });\r\n  const [state, setState] = useReducer(reducer, initialState);\r\n\r\n  const handleRoomCode = useCallback(() => {\r\n    //const query = props.location.search.substr(1);\r\n    const query = new URLSearchParams(props.location.search);\r\n    let roomCode = \"\";\r\n    for (let param of query.entries()) {\r\n      if (param[0] === \"code\") {\r\n        roomCode = param[1];\r\n      }\r\n    }\r\n\r\n    const idForUser = cryptoRandomString({ length: 10, type: \"url-safe\" });\r\n\r\n    props.socket.emit(\"joinRoom\", { code: roomCode, userId: idForUser });\r\n  }, [props]);\r\n\r\n  const roomJoinedHandler = useCallback(\r\n    (response) => {\r\n      setState({\r\n        hasJoined: true,\r\n        roomCode: response.room.code,\r\n        roomTopic: response.room.topic,\r\n        userId: response.userId,\r\n        users: response.room.users.toString(),\r\n      });\r\n\r\n      let newMessages = state.messages;\r\n      newMessages.push(response.admin);\r\n      setState({ messages: newMessages });\r\n    },\r\n    [state.messages]\r\n  );\r\n\r\n  const failedJoinHandler = useCallback((error) => {\r\n    setState({ hasJoined: false, errorMessage: error.message });\r\n  }, []);\r\n\r\n  const roomLeftHandler = useCallback(() => {\r\n    props.history.push(\"/\");\r\n  }, [props.history]);\r\n\r\n  const userUpdateHandler = useCallback(\r\n    (response) => {\r\n      let newMessages = state.messages;\r\n      newMessages.push(response.admin);\r\n      setState({ messages: newMessages, users: response.userCount });\r\n    },\r\n    [state.messages]\r\n  );\r\n\r\n  const roomLeaveHander = () => {\r\n    console.log(\"LEFT\");\r\n    props.socket.emit(\"leaveRoom\");\r\n  };\r\n\r\n  const onMessageChange = (e) => {\r\n    setState({ userMessage: e.target.value });\r\n\r\n    if (isTyping.current === false) {\r\n      isTyping.current = true;\r\n      props.socket.emit(\"typing\", { isTyping: true }, (err) => {});\r\n    } else {\r\n      if (e.target.value === \"\") {\r\n        isTyping.current = false;\r\n        props.socket.emit(\"typing\", { isTyping: false }, (err) => {});\r\n      }\r\n    }\r\n  };\r\n\r\n  // enter key handler to send message\r\n  const handleSendMessage = (e) => {\r\n    if (state.userMessage !== \"\") {\r\n      props.socket.emit(\"message\", { text: state.userMessage }, (err) => {});\r\n      props.socket.emit(\"typing\", { isTyping: false }, (err) => {});\r\n      setState({ isTyping: false, userMessage: \"\" });\r\n    }\r\n  };\r\n\r\n  const newMessageHandler = useCallback(\r\n    (message) => {\r\n      let newMessages = state.messages;\r\n      newMessages.push(message);\r\n      setState({ messages: newMessages });\r\n    },\r\n    [state.messages]\r\n  );\r\n\r\n  const someoneTypingHandler = useCallback((typing) => {\r\n    let count = typing.count;\r\n    let typeMessage = \"\";\r\n\r\n    if (isTyping.current === true) count--;\r\n\r\n    if (count > 0) {\r\n      if (count === 1) typeMessage = \"Someone is typing...\";\r\n      else typeMessage = `${count} people are typing...`;\r\n    }\r\n\r\n    setState({ typingMessage: typeMessage });\r\n  }, []);\r\n\r\n  const openModalHandler = () => {\r\n    setState({ modalOpen: true });\r\n  };\r\n\r\n  const closeModalHandler = () => {\r\n    setState({ modalOpen: false });\r\n  };\r\n\r\n  const inviteEmail = () => {\r\n    const link = window.location.href;\r\n    const subject = encodeURI(\"Chatnonymous Room Invite\");\r\n    const body = encodeURI(\r\n      `You have been invited to a Chatnonmyous Room with the topic: ${state.roomTopic}\\n\\nClick the following link to enter the room:\\n${link}\\n\\nFrom,\\nChatnonymous Team`\r\n    );\r\n    const mail = `mailto:?subject=${subject}&body=${body}`;\r\n\r\n    window.open(mail);\r\n  };\r\n\r\n  const copyLink = () => {\r\n    const link = window.location.href;\r\n    copy(link);\r\n  };\r\n\r\n  const socketCommands = useCallback(() => {\r\n    props.socket.on(\"roomJoined\", roomJoinedHandler);\r\n    props.socket.on(\"failedJoined\", failedJoinHandler);\r\n    props.socket.on(\"roomLeft\", roomLeftHandler);\r\n    props.socket.on(\"onTyping\", someoneTypingHandler);\r\n    props.socket.on(\"newmessage\", newMessageHandler);\r\n    props.socket.on(\"onUserJoin\", userUpdateHandler);\r\n    props.socket.on(\"userLeft\", userUpdateHandler);\r\n  }, [\r\n    roomJoinedHandler,\r\n    failedJoinHandler,\r\n    roomLeftHandler,\r\n    someoneTypingHandler,\r\n    newMessageHandler,\r\n    userUpdateHandler,\r\n    props.socket,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (state.hasJoined)\r\n      messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\r\n  });\r\n\r\n  useEffect(() => {\r\n    socketCommands();\r\n    handleRoomCode();\r\n  }, [handleRoomCode, socketCommands]);\r\n\r\n  return (\r\n    <MultiThemeProvider theme={theme}>\r\n      {state.hasJoined ? (\r\n        <React.Fragment>\r\n          <Header\r\n            users={state.users}\r\n            onLeave={roomLeaveHander}\r\n            onOpenModal={openModalHandler}\r\n          />\r\n          <div className={classes.scenarioContainer}>\r\n            {state.messages.map((message, index) => (\r\n              <Message\r\n                msg={message}\r\n                key={index}\r\n                isSent={message.userId === state.userId}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div style={{ float: \"left\", clear: \"both\" }} ref={messagesEnd}></div>\r\n          <div>\r\n            <Typography color='primary'>{state.typingMessage}</Typography>\r\n          </div>\r\n          <div className={classes.inputContainer}>\r\n            <TextField\r\n              variant='outlined'\r\n              onChange={onMessageChange}\r\n              placeholder='type something here'\r\n              autoFocus={true}\r\n              className={classes.chatText}\r\n              value={state.userMessage}\r\n              onKeyPress={(e) =>\r\n                e.key === \"Enter\" ? handleSendMessage() : null\r\n              }\r\n            />\r\n          </div>\r\n\r\n          <Modal\r\n            open={state.modalOpen}\r\n            onClose={closeModalHandler}\r\n            className={classes.modal}\r\n          >\r\n            <div className={classes.paper}>\r\n              <h2>Room Code {state.roomCode}</h2>\r\n              <p>{window.location.href}</p>\r\n              <div className={classes.modalButtons}>\r\n                <Button\r\n                  variant='contained'\r\n                  color='primary'\r\n                  onClick={() => inviteEmail()}\r\n                >\r\n                  Email Link\r\n                </Button>\r\n                <Button\r\n                  variant='contained'\r\n                  color='primary'\r\n                  onClick={() => copyLink()}\r\n                >\r\n                  Copy Link\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Modal>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <Header />\r\n          <div className={classes.noRoom}>\r\n            <h2>No Room Found</h2>\r\n            <h3>Make sure you enter in the correct Room Code.</h3>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </MultiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport Home from \"./screens/Home\";\r\nimport CreateRoom from \"./screens/CreateRoom\";\r\nimport Room from \"./screens/Room\";\r\n\r\n//const socket = io.connect(\"localhost:5000\", { forceNew: true });\r\nconst socket = io();\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path='/'\r\n          render={(props) => <Home {...props} socket={socket} />}\r\n        />\r\n        <Route\r\n          path='/create-room'\r\n          render={(props) => <CreateRoom {...props} socket={socket} />}\r\n        />\r\n        <Route\r\n          path='/room'\r\n          render={(props) => <Room {...props} socket={socket} />}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Chatnonymous_Dark.f834275c.png\";"],"sourceRoot":""}